---
# Source: cilium/templates/cilium-secrets-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: "cilium-secrets"

# Only create the namespace if it's different from Ingress secret namespace or Ingress is not enabled.

# Only create the namespace if it's different from Ingress and Gateway API secret namespaces (if enabled).
---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVjVwSmxGWlpDT05GcFZhS0kxTmkvakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13T0RFM01EZ3lPVEV6V2hjTk1qWXdPREUyTURneQpPVEV6V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRE1PMGFMZ0VoNVQyaEtYR2ppd0hwdTduRWhGZ3FCSDZnNFV3Tkxuei9PU0hrNWF6cE8Kc3Z6T2RjWGxoT01QcTZuaDJ1K2NPMTFlTDBzY3dTTk8rcHlwNjJib1NibU5FbXpMKzBsUng3MGJRc28vdlA2TQpTM3BlcUt3ZncrcEVQQkNzTFczM1RCdzNKRHZaTjh2NS9PNlFqUlJyV2tSR1NGQW9BWEZYR2hkOWpqREJQQWlOCmQ1aFN2cUUwcGFGREdJRkJKOWdEYkphWGVyV2NMUHBabStXb2gxNzJpUFZ2OUR2bVBaZFduQ2pvQ1oyY0s3WFYKaGFFeWZpckpvSk5JNHFWbFViTk41U1NEZTRTUDNLb1lTMHFyZzI5Q1cvcHFzbXMrNFg0TFNnZUEvWU0rdmhDTQpMNG1CeDQ4bW01dGU2ZHliL29FOVRaOUhQZ1lpRWk1MkYyN0ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVViVHVOQmg5bVdxRFFRQXBmQ1VlMGgyVmYva2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIR2Q0QTBsQndwK2tCTUcyYzNsSjlTaFF5eHVHUWx5VzNFd2paM1VvbmZuenZoQzR4dzZ5c1o0CmlFYkJjRVhoei9jbnFtYXkzL2N3WFJkNkRmd3pKZDV2bmVnOGVXNCtBKzQzd2hCWFhlMW5wajc1NGZ4VmxodEwKd1YwVXFXeWlRS2JhK0R4RlZDUm92YTdWaEJmWXRiU3NpbEtDVmVRUk9Ja2xjQjlLV3RNM1lLRnBpaGEvSE5PdQovVys3dkQ2ZDAzcTNaNFpSd0lkMXlHaUJROWg1TktZOTcrUkhCbktNa3dZS2lmS0VLTU1IT1F6SEpIQ1JmVm80ClZTNXNNRFg1SEtEZmg1clRqeTQzRWN0OERlVGpmWk14VkJLVno5Z1lmdml5TkovS3kvdzNGMHlkTUxSMFN5MXgKbXRBZjR3ZnVzRytRVGJlMVJoTW1LNmdjR0xmSk51dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBekR0R2k0QkllVTlvU2x4bzRzQjZidTV4SVJZS2dSK29PRk1EUzU4L3praDVPV3M2ClRyTDh6blhGNVlUakQ2dXA0ZHJ2bkR0ZFhpOUxITUVqVHZxY3FldG02RW01alJKc3kvdEpVY2U5RzBMS1A3eisKakV0NlhxaXNIOFBxUkR3UXJDMXQ5MHdjTnlRNzJUZkwrZnp1a0kwVWExcEVSa2hRS0FGeFZ4b1hmWTR3d1R3SQpqWGVZVXI2aE5LV2hReGlCUVNmWUEyeVdsM3ExbkN6NldadmxxSWRlOW9qMWIvUTc1ajJYVnB3bzZBbWRuQ3UxCjFZV2hNbjRxeWFDVFNPS2xaVkd6VGVVa2czdUVqOXlxR0V0S3E0TnZRbHY2YXJKclB1RitDMG9IZ1AyRFByNFEKakMrSmdjZVBKcHViWHVuY20vNkJQVTJmUno0R0loSXVkaGR1eFFJREFRQUJBb0lCQURneTczeWZ0bEc3YWlWYwpQSGg1SXJlMzRXV0xYU1NmQTNsTVRwSFdwb1lySjBDSG95blkwdncxS0ZtNk1ZazBZYkVHdi95cjBVdURsQlc3CmgrM0p4S1oxWW9IMUY1d2NQOWY1cy9sUEQxaWJEbkJ2bjFRWHlQcVhTNVlLSVVMWmpIVDBvMWZ6bDZnTXpuTTkKaVdHbkdqYW91NysydlNiaDZ6eTIrT3RSQUxuSmtsbFNMdlpVK1NuTmdxc3JxTVI5enA4aStCTE8rZGVPOWg1TwpKOGRyMG9OSVdHVWhONnYrTmw4NGpDS2liWWtzSk9RWGoxc0xpc2ErMjVDeHVyVHoxZjR4dWRBNlBReHVwbkovClMvbXRCbllpWmZYQjFCbDdFQ3NtRCtuMHhwTDEvUlBDZm1RWXpiRUFqQzJvNlJIdHZHQ29vVWJxNEhsREZGdGEKMFhDb1JWa0NnWUVBempOVzFod0hmYzZzY0lCaXcveXVzYzFubEtKdEtzTk9jVlVEdzFHUTlBRWZQcTBuRVpxYQovaDM5L3Fad0I3SUFKK21IM0ZUbnpkalVwSk96UURNRGJFMXRzbjVkclRuT3dibGdOd1N5VHB6MHZIYkd0dXhwCjNsQWVpK0pkSW83blpLcmRkTjVTVGVXejZ3MU5MNTM2QUk2eXZwNnlGRlhOaGlHTVRjdDVWSjhDZ1lFQS9ZNHoKTmdOVzE4bFZ5RGRkaGpMQ08yRngyK1hFUmg1QzlKK3QvMlEwZXd5LzhZalFIc0ZyZmMvQ1NkdkZ6b3J1RnhGZgpzT3hnRS8zM0RoKzFBWFBBc0lFeU9FSXk3YXNBdW9nTHduakw4YlRHQUp5OXdFQ2FIMUFOdGxjVVBJajV3YWgzCmdOQWtzZzhWbzljajZOVHBvengrM1ZkOGhTMkZVTjM3cU9vVFBoc0NnWUVBeVNRcGE5aVJzalk5M2N4UEM3RmIKMDlOelcva0psbkpIL2FPWmRSa0cxZzZXSlBTUkxNbnNzVUFlZVI1d0lBR1J4MTAxaTBkRGkzZ2REYUdLZEhDTwp3VUhTWlJDQlhxNEtNczBhdnZDVTRyeVd1NVQ5aUlpYlNTSk1lZFhKVmlHaU5IKzhZUGxSdmV6NUVhdTdCRjBNCjl5ZzcwbGhKakM2YXVtSFZWRG5NMUM4Q2dZQTB0YkwvcjRJR0tkeWpXcDhlbnI2eUNYZlo5dEh1b2F2Wm5yaFYKTjBlUnJQemFBVThDbGNMNnpJM2ZQTWpLUHlkdnREVG9XcnMrYkxWSFFtQW1oU0d4ajZvWTkrb09ibFlnY05mQQovY3VuMjZTdHkrZkdaNmVpaXNuTzlodEcybExSWjJ3d1l4Uzl6MVQ0VW1rc3BkWk1FTzl1cEJsR3RrZlluODBKCk9GLzNzUUtCZ0hwWlpNdDV3TVZkeGpmcG12em9WS2k5d3VDdWR5SkNtaEZYTEhCNnNUWDQwV0JqUXZwM1E3THQKZGg4UndSOTU3S3FHWlN0Um1DNko1WjB1M2xFTkoxaXpVRExWMkROVTdmaVVrb2hvMnZVa3luSVR0TzlDdkhxOQpWNVJ1cVVlL2VFb0hWQys2M3M0YkFuYkJTL1FYc1pBT0M2YnhRSUFIL0xJcEUzQWgxanBnCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVjVwSmxGWlpDT05GcFZhS0kxTmkvakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13T0RFM01EZ3lPVEV6V2hjTk1qWXdPREUyTURneQpPVEV6V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRE1PMGFMZ0VoNVQyaEtYR2ppd0hwdTduRWhGZ3FCSDZnNFV3Tkxuei9PU0hrNWF6cE8Kc3Z6T2RjWGxoT01QcTZuaDJ1K2NPMTFlTDBzY3dTTk8rcHlwNjJib1NibU5FbXpMKzBsUng3MGJRc28vdlA2TQpTM3BlcUt3ZncrcEVQQkNzTFczM1RCdzNKRHZaTjh2NS9PNlFqUlJyV2tSR1NGQW9BWEZYR2hkOWpqREJQQWlOCmQ1aFN2cUUwcGFGREdJRkJKOWdEYkphWGVyV2NMUHBabStXb2gxNzJpUFZ2OUR2bVBaZFduQ2pvQ1oyY0s3WFYKaGFFeWZpckpvSk5JNHFWbFViTk41U1NEZTRTUDNLb1lTMHFyZzI5Q1cvcHFzbXMrNFg0TFNnZUEvWU0rdmhDTQpMNG1CeDQ4bW01dGU2ZHliL29FOVRaOUhQZ1lpRWk1MkYyN0ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVViVHVOQmg5bVdxRFFRQXBmQ1VlMGgyVmYva2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIR2Q0QTBsQndwK2tCTUcyYzNsSjlTaFF5eHVHUWx5VzNFd2paM1VvbmZuenZoQzR4dzZ5c1o0CmlFYkJjRVhoei9jbnFtYXkzL2N3WFJkNkRmd3pKZDV2bmVnOGVXNCtBKzQzd2hCWFhlMW5wajc1NGZ4VmxodEwKd1YwVXFXeWlRS2JhK0R4RlZDUm92YTdWaEJmWXRiU3NpbEtDVmVRUk9Ja2xjQjlLV3RNM1lLRnBpaGEvSE5PdQovVys3dkQ2ZDAzcTNaNFpSd0lkMXlHaUJROWg1TktZOTcrUkhCbktNa3dZS2lmS0VLTU1IT1F6SEpIQ1JmVm80ClZTNXNNRFg1SEtEZmg1clRqeTQzRWN0OERlVGpmWk14VkJLVno5Z1lmdml5TkovS3kvdzNGMHlkTUxSMFN5MXgKbXRBZjR3ZnVzRytRVGJlMVJoTW1LNmdjR0xmSk51dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRY2dFSFF0OGJLRE1oRDZQUERZeC9hakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13T0RFM01EZ3lPVEV6V2hjTk1qWXdPREUyTURneQpPVEV6V2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQ1hWMUFXaXVocEJROGxnbmFuajk2dFliQ0lQQm4KZU5hcVVkUzNsWlE0SE1PM0RhYSt5Rmc3T0dYS0RaMERmOXUyVHd5Y0RaSGhUaXBuSXRROG1CSHlTSFdqVWZNNApEQ0hJQi9ZYzY2bmJrUFYzU3RkUnpCcTIwZGVBL25pUDlEdFE4ZEl0dDR6NXlLM0tnRVREeWFJVmhEL2p3aVU2CkYybFpQM2FjR0tDUjBONmFIcGxENkFGbVQ4WjEvN21sb2E5NGlGU1pnZUU5R0V5RXVlMjY2OEVCTDRFLzV2RW8KN3NYblRYUG8xR0FxVXA5Z2JTalQ5emZpSnNISXVnSGp5aXIvemhqN1NhS0Y1eFVhUHFUOFE4NGtkTnREUXVvQwpVaHZRSlJjVi91VmhGQkduNEwrMzYzWHZNbHFhUFBXUEZ2RUg2UzZjQWhuNGhpOGdXb051aWFhTEFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZHMDdqUVlmWmxxZzBFQUtYd2xIdElkbApYLzVITUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUF0QjM5ZldNYWR6RC94SDlyN3JDR1luOStLaU9WUW1CeU0yNCtUNnFMaXc3STdtNEIKcmh4c2s3UEdlU3hiN0hZOTlDQ2pPdDFtekNSZ0NSc0s2U3VmbGZLY3VzVzJJU21pTzdJNU9pL0w0ZmFwNmkyYwpXY2tRUENpNHdyUFRuc0lYbXlOb1h2WDhJVWNqWmhUam50UC8wblpwelA2TlNFZXgzd3pQWFdRb0ovbVlTWnZUCjlEU05KQzVhclpCS1lIOHJETGlUam1VNWZkNS93RklJdlIyYmxGTGpsdW4wUnFBS3Vwdmp2UG40eCtkOEdCSVUKRWhwZE05QnYrL1pOaWtqKzE4TmNWczRyQjArZ3lkZWIvcFp2Q3lQMkJPcUtyUkpUZUtOQUhrcDRvZXptTnVldQpWTDBEdElhWWRTbEF6NU9XczZndFF6YWRNUlh4VE9CdGFxM01kdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd2wxZFFGb3JvYVFVUEpZSjJwNC9lcldHd2lEd1ozaldxbEhVdDVXVU9CekR0dzJtCnZzaFlPemhseWcyZEEzL2J0azhNbkEyUjRVNHFaeUxVUEpnUjhraDFvMUh6T0F3aHlBZjJIT3VwMjVEMWQwclgKVWN3YXR0SFhnUDU0ai9RN1VQSFNMYmVNK2NpdHlvQkV3OG1pRllRLzQ4SWxPaGRwV1Q5Mm5CaWdrZERlbWg2WgpRK2dCWmsvR2RmKzVwYUd2ZUloVW1ZSGhQUmhNaExudHV1dkJBUytCUCtieEtPN0Y1MDF6Nk5SZ0tsS2ZZRzBvCjAvYzM0aWJCeUxvQjQ4b3EvODRZKzBtaWhlY1ZHajZrL0VQT0pIVGJRMExxQWxJYjBDVVhGZjdsWVJRUnArQy8KdCt0MTd6SmFtanoxanhieEIra3VuQUlaK0lZdklGcURib21taXdJREFRQUJBb0lCQVFDZjlsa1Y2bUE0WXlLbwpqazlEMXJPbDJSbzBVUW1xRHdDVklrM3dYYkdqME1DZXVpUitwY0kvMHZXcktqTU1PMEZuTkgzTFBUdlBjeFpnCjFZQlk4a3JxM1FtOFJXam51c3hlcFhhL2JKRFovTjZZdEVhcnNsQldJRE85blRFNlFLWkV3eERZd1ZUTUNvWkYKdi9WWU1XMHRTaStPMGl6ek4ydGpvV0NMclpVUkM2VTdPdXN1OEF1WkVTYVpXbndYcnM3MUp5YU10aHZkNTFqLwpjN1hSNWpsM2Y4cjFjQXA2d3hMbTVLUElWK1FZQlV1MXZpUGtsUHgrSTZTaEc2dzhrQ0RXdEFhd0dHM2lnN3R2CnUxaXFHZE9qcVdLWmgxdUtwTGJPUU1uWVptTm5qc2lyWDJkVlhqdTlmSkF2M3FQdmR4bXBHTEFzTkNoWVhlVXoKMit2RTFKRzVBb0dCQU1ZdUJOVkp5djRNUlY0TlRxRXFWOUF1SVhIV3FhUVUvMkJLQlhLWlFwOUtqd2xaaHVIagpUVlUySE8zejlFUlBuWW5nNEVBMVlJVjU1amxGbU9yckYvdmFvVWt3WDgwaUFBTTNsM1RNMnlQLzNKNUkvdlVGCjNndHY3ejNnTmFEOGlUdzVPRWo1bkpYQWVvaFdMT005eGFXeVljRnZ4SnNGZFNFOG5JZU5YdE1GQW9HQkFQc1MKWm1nT2VCS1lvc0ZtTnIwOUJKTFMwdHNFRGkvbFBZSHV3RytCUlB6ODdXNk1jOGF0dVM3RU9XdFpWMmkveTBzSQpCVmVyWXB4amZ1UVZWa0JMMDByVGlQTUhScWxPbk5Wa1VCeHlzd0crSUk0SHV4a0Q0QlpOMkJ2b25ZZjRjeDdICnpwczRPUnFoSmoyRkxFeHdxRFVnRlpKTFFXMk9meUNTZDEybEF1aFBBb0dBQnJFbEhxS29SUjNhOWNzVFBhUDEKWlNVNW9lTnl4UVNrZnZiZzZqYThwaTVaV0NKNnlJUHBaNWcxTDkvTi9zU0ZlRk5zbng1dVRQT0p6Nk5HLzUvQwpwcEdDWXJ0TWNOdldEa1hCU29Oa1h2blQxRkI0czROb05SQ3BqbmhVdDBQdnltWFFQYjZZQ0FLQTRMdXdObGd1CnBXSzVwRk9HMndrN0pFMHNwL01oSVpVQ2dZQXJXL1FmaUZBb05mLzFrbWRscXdIOU1UZUU1MkJqMlIwVU1WMCsKWkg2N2locWUrdGFMdXppOTRObGh0cDRuMHVlUzM2RzhrRGFKZDQxVWFuTG95NitEdnFCcUNCbWw1NU9pTHA2LwpLdmZMRjBDY0JxM0RGaTQrNjlha2l6bVpYOGpSeWdQZVBvbHVGZUo2d1dMekdJbVVFeVJtaldTUlBRaXJZV0FICjVoVm9kUUtCZ1FDL2ZSMnczL1hzSXE2M3VzYjFyVUU0dUYxRmlqQThvWEpyNlRNSmNmZXVtOWEzd09TUjdPdUsKdHpXM1hKVk8yTGlpRDBqY0xSTGlYbkI1TkZGeEdyb0llMFhINDJzejdhVHFRckZYTENLcGdnQVlqb3h2ZWduKwpFd3hBa1hHdGcvZmNwang3ZGcrQ2VFVi9uTTc2RXdNaktEZ0YraXNoS0s1aXFNazRob1J0NlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt:  LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRVjVwSmxGWlpDT05GcFZhS0kxTmkvakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13T0RFM01EZ3lPVEV6V2hjTk1qWXdPREUyTURneQpPVEV6V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRE1PMGFMZ0VoNVQyaEtYR2ppd0hwdTduRWhGZ3FCSDZnNFV3Tkxuei9PU0hrNWF6cE8Kc3Z6T2RjWGxoT01QcTZuaDJ1K2NPMTFlTDBzY3dTTk8rcHlwNjJib1NibU5FbXpMKzBsUng3MGJRc28vdlA2TQpTM3BlcUt3ZncrcEVQQkNzTFczM1RCdzNKRHZaTjh2NS9PNlFqUlJyV2tSR1NGQW9BWEZYR2hkOWpqREJQQWlOCmQ1aFN2cUUwcGFGREdJRkJKOWdEYkphWGVyV2NMUHBabStXb2gxNzJpUFZ2OUR2bVBaZFduQ2pvQ1oyY0s3WFYKaGFFeWZpckpvSk5JNHFWbFViTk41U1NEZTRTUDNLb1lTMHFyZzI5Q1cvcHFzbXMrNFg0TFNnZUEvWU0rdmhDTQpMNG1CeDQ4bW01dGU2ZHliL29FOVRaOUhQZ1lpRWk1MkYyN0ZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVViVHVOQmg5bVdxRFFRQXBmQ1VlMGgyVmYva2N3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFIR2Q0QTBsQndwK2tCTUcyYzNsSjlTaFF5eHVHUWx5VzNFd2paM1VvbmZuenZoQzR4dzZ5c1o0CmlFYkJjRVhoei9jbnFtYXkzL2N3WFJkNkRmd3pKZDV2bmVnOGVXNCtBKzQzd2hCWFhlMW5wajc1NGZ4VmxodEwKd1YwVXFXeWlRS2JhK0R4RlZDUm92YTdWaEJmWXRiU3NpbEtDVmVRUk9Ja2xjQjlLV3RNM1lLRnBpaGEvSE5PdQovVys3dkQ2ZDAzcTNaNFpSd0lkMXlHaUJROWg1TktZOTcrUkhCbktNa3dZS2lmS0VLTU1IT1F6SEpIQ1JmVm80ClZTNXNNRFg1SEtEZmg1clRqeTQzRWN0OERlVGpmWk14VkJLVno5Z1lmdml5TkovS3kvdzNGMHlkTUxSMFN5MXgKbXRBZjR3ZnVzRytRVGJlMVJoTW1LNmdjR0xmSk51dz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWakNDQWo2Z0F3SUJBZ0lRUHV3d2pib21Pd2JIY0RWeTQ2WmFIVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13T0RFM01EZ3lPVEV6V2hjTk1qWXdPREUyTURneQpPVEV6V2pBcU1TZ3dKZ1lEVlFRRERCOHFMbVJsWm1GMWJIUXVhSFZpWW14bExXZHljR011WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBc0FuYTllTDlOWWdzV2hCYzhYbmQKcEtZVXdtRkZQQWwydzNjRWRlSnUydHhyYnlhRWl4cDFsUUQ0ZFpWdnZVQmxKenEyY2Z1WUdTUU12WElLbjBmZApTUW9BblFmYTViSHVtZmtNU3paUmZ1aDZGdXBJVTliMTdPUklrVlpOZnU2UncyUmtXY3BzeHVWSUI0Vzc4REVqClk0SUF5UkU5cEIvUjBPVEVpSUN1d0RJZ0x1ZHBMVmVZdUNiUXAyRHQyZzh4b0JHU1VhSXIxYlI2TGc0bFdQL1QKQ0FLSENoRHlDdEk1aWZuZE9xNjUzZWVBWVJBYU9EMStHNTNYa2NBZFcwdmJ2Q3JyakNnQmdUV1o1WjRwVmpscgpJOVNwOEIvamQvZ2FaT3ZHZFp1MzhYNXMxT1NaSitWUXRrVnpDNEpWa0ZDeXAwZmNxeXdQUzNQZGVSNVlQNXhnCjBRSURBUUFCbzRHTk1JR0tNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSdE80MEdIMlphb05CQQpDbDhKUjdTSFpWLytSekFxQmdOVkhSRUVJekFoZ2g4cUxtUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBeE95U3BEeHlnZ0M3YUx6b0ZMOXhydjJsdWw0dHAKam9YRE1mZG5Ud00wdUxINGt1UkdDQmNjRGU0eXUzVVdGRzNSbWlKK2U5RldMeG1rSlFySGpiUkMxL2VnSHJIbwpxb3pldEZBWFRnQWJoaVE4ZEdkbXJXeGYyZzVLcWFJdkFzbXUzTW5Ja0dWZDNOTlZtSHhGVmNRWUZPNlJiVzlECkZnbytyQWhlazNQNWtJNzFmVEN5TXNpZ24rR2ZqRFp0azF2RHpFekR1STJkemd3YldMbTQ5VEc5OGw3NHptRWcKNlFXaFJVL2JEbXg1a3RscFZxUXo0NUg3VUgrL2ZBY0k4QXFIa0JxdkRZK2orU2kzcDB2K28yTEdlTk9mQzE3WApodHJHcXE3TGYvY21mRkRaMGRWdVZzL2dsdHNVa2oxTGlZNXVFMTRteXFjQkduMzVZM2JlL2F3eAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBc0FuYTllTDlOWWdzV2hCYzhYbmRwS1lVd21GRlBBbDJ3M2NFZGVKdTJ0eHJieWFFCml4cDFsUUQ0ZFpWdnZVQmxKenEyY2Z1WUdTUU12WElLbjBmZFNRb0FuUWZhNWJIdW1ma01TelpSZnVoNkZ1cEkKVTliMTdPUklrVlpOZnU2UncyUmtXY3BzeHVWSUI0Vzc4REVqWTRJQXlSRTlwQi9SME9URWlJQ3V3RElnTHVkcApMVmVZdUNiUXAyRHQyZzh4b0JHU1VhSXIxYlI2TGc0bFdQL1RDQUtIQ2hEeUN0STVpZm5kT3E2NTNlZUFZUkFhCk9EMStHNTNYa2NBZFcwdmJ2Q3JyakNnQmdUV1o1WjRwVmpsckk5U3A4Qi9qZC9nYVpPdkdkWnUzOFg1czFPU1oKSitWUXRrVnpDNEpWa0ZDeXAwZmNxeXdQUzNQZGVSNVlQNXhnMFFJREFRQUJBb0lCQUh0ODNsbUFlcWxUdGZFVAo2MjhGVXVMT0VsL3N4aG1BZGd4VjhBNFY0amVyU2IzMTRpS0dWQmRMVC8rRDdaZHZsY1c0SFFYR1BRTGQxQVlNCitzQ1RNL3FwaHBhaFRQKzJHcTl1RWg2c291eUlmaVNYQWxlMXdsd0VJNWU0VjdLRC9rSjNxU0dIcTFpMnZCbHkKeWN5TFc4elJCR1lIcnhyenEwYURSQTZSWG9TNU9zRU9RclJUb2ptU3A5VXJkRWUyUGtQZW8vd3ZoaGUrbXR3bQo1cW9yR1ByUkRJeDlSTTc3eFlmNmxjRWsvL1I2UXRRdXBDVFBNaUgwc2F0eEN1dVFleHJQY3JuOUdjemR2TGN3CllOYWdyWlo4UndENnIrSGdnb0FQZzYxcmtXQ3FuVXlZekZLaDErNHZSRm85VDEzWXE3aHNPN2dhSnVraU9hcG4KZEZMVXhBRUNnWUVBeWdxUStDYnUxMXRraXR5dXA1ZXBRZ1M3TFhXWVVBUkNzOHhhaDBQMnJ1SjlWSlNnbnhPeQpTMGdvUmd2MGFJcUNRNlI5bU43RjhpRmcvL2sxN0RHWkI5RERsaXRVZDA3UU9GMUUzSW5pWlhTcGlWOEhzbHRmCldEeWwrUzRZN21WWTBzRWVCcjdJY0NKaHN4VFV4cUJlb0tIZFhaUGk4QjFQdTVxN3krMGFSNUVDZ1lFQTN3MSsKNHdJNFJlUWlqNFQrZWdkVi9sY2ltNTJMenhJRXJlcENTZWlXNFcvRHgzOExvS09FS1Jzelc2SjRXOEM4cnR3NQovSjlDcjNzM1JTdjQvMURrbEJqMlFGT3c5SVFpQVMva2xabTk1aFoyOGVzTFFjd2MrdUxJa0FFTHdEcmxxNWJHCkZSUUt5RGlTS2JrWHByM2ZvVWFIVUFUSVF1ck0rYmpUS1VCMFpVRUNnWUVBc2Q1YmdodkVhUk9za0JONEwxTDEKVDRtYXY0cW5iTXBUYnJhWmZEdjVFRDJVMk1HQUpvdlFpelliUG8rSHZBRTBiUmlDK2ZJbGtlU1E0TWtsRDZzYQpiaWI4Q1ZoY0pDemVZc0M1dnU0a3dlelMxSDAwNlhCSG9BYkVsM3BkdUlMQWo4bzBCUHd3dVllTE8zMDdWU0lhCkxKQlRzZTVmKzhQU1RmY0xIWnkvWmdFQ2dZQThzb1YyN09HM1V5OThjcXAxTm8zV0dvd1dZTGJzOEhCSmkxZmkKbU9LR0VrM3FlYzRHTnJqK0hxTEpLdHNwekxjTHRtNHBLb1dSRHl5cExDQWtDalZKZjhsekU5TXhsc3RTRzJCTwp2WG1KcFU5VTRhczhpbmpRWk9wREZhWEc5OEFNQTRsL3J1YUlPYXk4b2R1bnlqK1N1WWlVNDloRExYWDk5cWV2CnNCUjhnUUtCZ0JWOE96S3RxelNNUmppemJaUS9QYUNQaEJUNVQ1Q203ZTlWR3NlMElXalRtSi9lakVkWVdQUTcKc3ByM1BNd05NQ1JjSDljRjFmUkJKNXIyOXZWYkRtMjNkclg3TlRPUzQrdU9mcTFyRWtwQ2J4NmlGbDdGZm1vMgo1Slg5NHkrQkpIMDBNeDgxK2xaaDhGWjFDaXdKQjVmRzVHMUtTcW15TGgreXNSSk5iY1VqCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"
  skip-cnp-status-startup-clean: "false"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  # Port to expose Envoy metrics (e.g. "9964"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9964"
  enable-envoy-config: "true"
  enable-ingress-controller: "true"
  enforce-ingress-https: "true"
  enable-ingress-secrets-sync: "true"
  ingress-secrets-namespace: "cilium-secrets"
  ingress-lb-annotation-prefixes: "service.beta.kubernetes.io service.kubernetes.io cloud.google.com"
  ingress-default-lb-mode: dedicated
  ingress-shared-lb-service-name: cilium-ingress

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "0"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  routing-mode: "native"


  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  enable-local-redirect-policy: "false"
  ipv4-native-routing-cidr: 10.244.0.0/16

  kube-proxy-replacement: "strict"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "kubernetes"
  ipam-cilium-node-update-rate: "15s"
  disable-cnp-status-updates: "true"
  cnp-node-status-gc-interval: "0s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  enable-bgp-control-plane: "false"
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/sys/fs/cgroup"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"
  k8s-client-qps: "5"
  k8s-client-burst: "10"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"

  external-envoy-proxy: "false"
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: default
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  - ciliumcidrgroups
  - ciliuml2announcementpolicies
  - ciliumpodippools
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  # To synchronize garbage collection of such resources
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  - ciliuml2announcementpolicies/status
  verbs:
  - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # To remove node taints
  - nodes
  # To set NetworkUnavailable false on startup
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform LB IP allocation for BGP
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  # to check apiserver connectivity
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
  - create
  - update
  - deletecollection
  # To update the status of the CNPs and CCNPs
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  # Update the auto-generated CNPs and CCNPs status.
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  # To perform garbage collection of such resources
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  # To synchronize garbage collection of such resources
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
    # To perform CiliumNode garbage collector
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  - ciliumcidrgroups.cilium.io
  - ciliuml2announcementpolicies.cilium.io
  - ciliumpodippools.cilium.io
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumpodippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - cilium.io
  resources:
    - ciliumpodippools
  verbs:
    - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between multiple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status # To update ingress status with load balancer IP.
  verbs:
  - update
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - "*"
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-ingress-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: cilium/templates/cilium-operator/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-operator-ingress-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - update
  - patch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-ingress-secrets
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-operator/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-operator-ingress-secrets
  namespace: "cilium-secrets"
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-operator-ingress-secrets
subjects:
  - kind: ServiceAccount
    name: "cilium-operator"
    namespace: kube-system
---
# Source: cilium/templates/cilium-ingress-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: cilium-ingress
  namespace: kube-system
  labels:
    cilium.io/ingress: "true"
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    nodePort: 
  - name: https
    port: 443
    protocol: TCP
    nodePort: 
  type: LoadBalancer
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        # Set app AppArmor's profile to "unconfined". The value of this annotation
        # can be modified as long users know which profiles they have available
        # in AppArmor.
        container.apparmor.security.beta.kubernetes.io/cilium-agent: "unconfined"
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: "unconfined"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      containers:
      - name: cilium-agent
        image: "quay.io/cilium/cilium:v1.14.1@sha256:edc1d05ea1365c4a8f6ac6982247d5c145181704894bb698619c3827b6963a72"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-agent
        args:
        - --config-dir=/tmp/cilium/config-map
        startupProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 105
          periodSeconds: 2
          successThreshold: 1
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9879
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          periodSeconds: 30
          successThreshold: 1
          failureThreshold: 3
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        lifecycle:
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - CHOWN
              - KILL
              - NET_ADMIN
              - NET_RAW
              - IPC_LOCK
              - SYS_ADMIN
              - SYS_RESOURCE
              - DAC_OVERRIDE
              - FOWNER
              - SETGID
              - SETUID
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        # Unprivileged containers need to mount /proc/sys/net from the host
        # to have write access
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        # Unprivileged containers need to mount /proc/sys/kernel from the host
        # to have write access
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Unprivileged containers can't set mount propagation to bidirectional
          # in this case we will mount the bpf fs from an init container that
          # is privileged and set the mount propagation from host to container
          # in Cilium.
          mountPropagation: HostToContainer
        # Check for duplicate mounts before mounting
        - name: cilium-cgroup
          mountPath: /sys/fs/cgroup
        - name: cilium-run
          mountPath: /var/run/cilium
        - name: etc-cni-netd
          mountPath: /host/etc/cni/net.d
        - name: clustermesh-secrets
          mountPath: /var/lib/cilium/clustermesh
          readOnly: true
          # Needed to be able to load kernel modules
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: xtables-lock
          mountPath: /run/xtables.lock
        - name: hubble-tls
          mountPath: /var/lib/cilium/tls/hubble
          readOnly: true
        - name: tmp
          mountPath: /tmp
      initContainers:
      - name: config
        image: "quay.io/cilium/cilium:v1.14.1@sha256:edc1d05ea1365c4a8f6ac6982247d5c145181704894bb698619c3827b6963a72"
        imagePullPolicy: IfNotPresent
        command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      # Mount the bpf fs if it is not mounted. We will perform this task
      # from a privileged container because the mount propagation bidirectional
      # only works from privileged containers.
      - name: mount-bpf-fs
        image: "quay.io/cilium/cilium:v1.14.1@sha256:edc1d05ea1365c4a8f6ac6982247d5c145181704894bb698619c3827b6963a72"
        imagePullPolicy: IfNotPresent
        args:
        - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
        command:
        - /bin/bash
        - -c
        - --
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          privileged: true
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
      - name: clean-cilium-state
        image: "quay.io/cilium/cilium:v1.14.1@sha256:edc1d05ea1365c4a8f6ac6982247d5c145181704894bb698619c3827b6963a72"
        imagePullPolicy: IfNotPresent
        command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-state
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              name: cilium-config
              key: clean-cilium-bpf-state
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        terminationMessagePolicy: FallbackToLogsOnError
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            add:
              - NET_ADMIN
              - SYS_ADMIN
              - SYS_RESOURCE
            drop:
              - ALL
        volumeMounts:
        - name: bpf-maps
          mountPath: /sys/fs/bpf
          # Required to mount cgroup filesystem from the host to cilium agent pod
        - name: cilium-cgroup
          mountPath: /sys/fs/cgroup
          mountPropagation: HostToContainer
        - name: cilium-run
          mountPath: /var/run/cilium
        resources:
          requests:
            cpu: 100m
            memory: 100Mi # wait-for-kube-proxy
      # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
      - name: install-cni-binaries
        image: "quay.io/cilium/cilium:v1.14.1@sha256:edc1d05ea1365c4a8f6ac6982247d5c145181704894bb698619c3827b6963a72"
        imagePullPolicy: IfNotPresent
        command:
          - "/install-plugin.sh"
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          seLinuxOptions:
            level: s0
            type: spc_t
          capabilities:
            drop:
              - ALL
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
          - name: cni-path
            mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: "cilium"
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
      - name: tmp
        emptyDir: {}
        # To keep state between restarts / upgrades
      - name: cilium-run
        hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        # To keep state between restarts / upgrades for bpf maps
      - name: bpf-maps
        hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
      # To keep state between restarts / upgrades for cgroup2 filesystem
      - name: cilium-cgroup
        hostPath:
          path: /sys/fs/cgroup
          type: DirectoryOrCreate
      # To install cilium cni plugin in the host
      - name: cni-path
        hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        # To install cilium cni configuration in the host
      - name: etc-cni-netd
        hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        # To be able to load kernel modules
      - name: lib-modules
        hostPath:
          path: /lib/modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - name: xtables-lock
        hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: cilium-clustermesh
              optional: true
              # note: items are not explicitly listed here, since the entries of this secret
              # depend on the peers configured, and that would cause a restart of all agents
              # at every addition/removal. Leaving the field empty makes each secret entry
              # to be automatically projected into the volume as a file whose name is the key.
          - secret:
              name: clustermesh-apiserver-remote-cert
              optional: true
              items:
              - key: tls.key
                path: common-etcd-client.key
              - key: tls.crt
                path: common-etcd-client.crt
              - key: ca.crt
                path: common-etcd-client-ca.crt
      - name: host-proc-sys-net
        hostPath:
          path: /proc/sys/net
          type: Directory
      - name: host-proc-sys-kernel
        hostPath:
          path: /proc/sys/kernel
          type: Directory
      - name: hubble-tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-server-certs
              optional: true
              items:
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              - key: ca.crt
                path: client-ca.crt
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
      - name: cilium-operator
        image: "quay.io/cilium/operator-generic:v1.14.1@sha256:e061de0a930534c7e3f8feda8330976367971238ccafff42659f104effd4b5f7"
        imagePullPolicy: IfNotPresent
        command:
        - cilium-operator-generic
        args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: "api.cluster.local"
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        livenessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            host: "127.0.0.1"
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 5
        volumeMounts:
        - name: cilium-config-path
          mountPath: /tmp/cilium/config-map
          readOnly: true
        terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: "cilium-operator"
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
      - name: cilium-config-path
        configMap:
          name: cilium-config
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.14.1@sha256:db30e85a7abc10589ce2a97d61ee18696a03dc5ea04d44b4d836d88bd75b59d8"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - name: config
            mountPath: /etc/hubble-relay
            readOnly: true
          - name: tls
            mountPath: /var/lib/hubble-relay/tls
            readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      restartPolicy: Always
      priorityClassName: 
      serviceAccount: "hubble-relay"
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - name: config
        configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
      - name: tls
        projected:
          # note: the leading zero means this number is in octal representation: do not remove it
          defaultMode: 0400
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
                - key: ca.crt
                  path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      priorityClassName: 
      serviceAccount: "hubble-ui"
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
      - name: frontend
        image: "quay.io/cilium/hubble-ui:v0.12.0@sha256:1c876cfa1d5e35bc91e1025c9314f922041592a88b03313c22c1f97a5d2ba88f"
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8081
        volumeMounts:
        - name: hubble-ui-nginx-conf
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: tmp-dir
          mountPath: /tmp
        terminationMessagePolicy: FallbackToLogsOnError
      - name: backend
        image: "quay.io/cilium/hubble-ui-backend:v0.12.0@sha256:8a79a1aad4fc9c2aa2b3e4379af0af872a89fcec9d99e117188190671c66fc2e"
        imagePullPolicy: IfNotPresent
        env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: "hubble-relay:80"
        ports:
        - name: grpc
          containerPort: 8090
        volumeMounts:
        terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
# Source: cilium/templates/cilium-ingress-class.yaml
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  name: cilium
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: cilium.io/ingress-controller
---
# Source: cilium/templates/cilium-ingress-service.yaml
apiVersion: v1
kind: Endpoints
metadata:
  name: cilium-ingress
  namespace: kube-system
subsets:
- addresses:
  - ip: "192.192.192.192"
  ports:
  - port: 9999
